#!/usr/bin/env ruby -w

me = if File.symlink?(__FILE__)
  File.readlink(__FILE__)
else
  __FILE__
end

VIZER_ROOT =  File.expand_path("..", File.dirname(me))
WORKING_DIR = Dir.pwd

require 'rubygems'
require 'fileutils'
require 'rake'
require 'optparse'

include FileUtils

load File.join(VIZER_ROOT, 'tasks/build.rb')
load File.join(VIZER_ROOT, 'tasks/dist.rb')

EMPTY_PROJECT_PATH = "./projects"
DOT_FILE = ".vizer"

DEV_PATH = "./dev"
BUILD_PATH = "./build"
TMP_PATH = "./tmpbuild"


COMMANDS = {}

COMMANDS[:create] = Proc.new do |args|
  options = {
    :type => :basic
  }
  parser = OptionParser.new do |opts|
    opts.banner = "usage: vizr create [args] <projectpath>"

    opts.on("-t", "--type TYPE", [:basic], "Predefined project type (basic only offered now)") do |type|
      options[:type] = type.to_sym
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  parser.parse!(args)
  if args[0]
    src = File.join(File.expand_path(File.join(EMPTY_PROJECT_PATH, options[:type].to_s), VIZER_ROOT), ".")
    dest = File.expand_path(args[0], WORKING_DIR)
    cp_r(src, dest, {})
    touch(File.join(dest, DOT_FILE))
  else
    puts parser
  end
end

COMMANDS[:build] = Proc.new do |args|
  options = {}
  parser = OptionParser.new do |opts|
    opts.banner = "usage: vizr build [args] <projectpath>"

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  parser.parse!(args)
  if args[0]
    target = File.expand_path(args[0], WORKING_DIR)
    if File.exists?(File.join(target, DOT_FILE))
      Rake::Task["build"].invoke(target, options)
    end
  else
    puts parser
  end
end

COMMANDS[:dist] = Proc.new do |args|
  options = {
    :filename => "dist.zip"
  }

  parser = OptionParser.new do |opts|
    opts.banner = "usage: vizr dist [args] <projectpath>"
    options[:name] = "dist.zip"
    opts.on("-n", "--filename [NAME]", "File name of zip") do |filename|
      options[:filename] = filename
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  parser.parse!(args)
  if args[0]
    target = File.expand_path(args[0], WORKING_DIR)
    Rake::Task["package"].invoke(target, options)
  else
    puts parser
  end
end

COMMANDS[:help] = Proc.new do |args|
  # handles case when someone enters in "vizr help <command>"
  if args[0] && COMMANDS[args[0].to_sym]
    parse_args(args[0].to_sym, ["-h"])
    exit
  end

  # max spaces to show between command and description
  spaces = 10

  # output info
  puts "usage: vizr <command> [<args>]\n\n"
  puts "vizr commands are:"
  [
    ["build", "build a current vizr project"],
    ["create", "create a new vizr project"],
    ["help", "this information"]
  ].each do |cmd|
    puts "   #{cmd[0]}#{" " * (spaces - cmd[0].length)}#{cmd[1]}"
  end
end

def parse_args(command_name, args)
  command_name = command_name || :help
  args = args || []
  command = COMMANDS[command_name] || COMMANDS[:help]

  command.call(args)
end


cmd = ARGV[0].to_sym rescue nil
parse_args(cmd, ARGV[1..-1])
